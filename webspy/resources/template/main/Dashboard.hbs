<!doctype html>
<html lang="en">
{{> header}}
<body class="bg-black" data-bs-theme="dark">
{{> dashboard_navigation}}
<main style="padding-left: 300px;">
    <div id="main-content"></div>
    {{> footer}}
</main>
{{> scripts}}
<script>
    Chart.defaults.plugins.legend.position = 'bottom';
    Chart.defaults.plugins.legend.labels.color = 'white';
    Chart.defaults.plugins.title.display = false;

    let domainList, userList, uniqueUsersPerDomain;

    init();

    function init(){
        refresh();
        renderHomeOverview()
    }

    function refresh(){
        const contentFetch = fetch("/api/domain/all");
        const userFetch = fetch("/api/user/all");
        const uniqueUsersPerDomainFetch = fetch("/api/analytics/unique-users-all-domains");

        Promise.all([contentFetch, userFetch, uniqueUsersPerDomainFetch])
                .then(responses => {
                    const response1 = checkStatus(responses[0]);
                    const response2 = checkStatus(responses[1]);
                    const response3 = checkStatus(responses[2]);

                    return Promise.all([response1, response2, response3]);
                })
                .then(data => {
                    let response1 = data[0].json();
                    let response2 = data[1].json();
                    let response3 = data[2].json();

                    return Promise.all([response1, response2, response3]);
                })
                .then(data => {
                    domainList = data[0];
                    userList = data[1];
                    uniqueUsersPerDomain = data[2];
                    populateNavBar();
                })
                .catch((response)=>{
                    console.log(response);
                    response.json()
                            .then(errorData => {
                                console.log(errorData);
                            })
                            .catch(error => {
                                console.error("Error parsing error response:", error);
                            });
                });
    }

    // Rendering functions
    function populateNavBar(){
        let container = document.querySelector("#nav-domain-container");
        let htmlContent = `<li><a onclick="" class="link-body-emphasis d-inline-flex text-decoration-none rounded">Overview</a></li>`;
        domainList.forEach((domain) => {
            let htmlDomain = `
                <li><a onclick="viewDomain('${domain.domain}')" class="link-body-emphasis d-inline-flex text-decoration-none rounded">${domain.name}</a></li>
            `;
            htmlContent+= htmlDomain;
        });
        htmlContent += `<li><a onclick="viewCreateDomain('')" class="link-body-emphasis d-inline-flex text-decoration-none rounded">Add Domain</a></li>`;
        container.innerHTML = htmlContent;
    }

    function renderHomeOverview(){
        let container = document.querySelector("#main-content");
        let htmlContent = `
        <div class="d-flex justify-content-center align-items-end p-4 tiled-WS-background mb-3" style="position: relative;">
            <h2 class="fw-bold fs-1">Traffic Overview</h2>
        </div>
        `;

        container.innerHTML = htmlContent;
    }

    function viewDomain(domainId){
        let container = document.querySelector("#main-content");

        let domain = domainLookup(domainId);

        console.log(domain)
        if(domain.domain == null){
            // domain not found
            viewCreateDomain("Domain not found");
        }else{
            Promise.all([fetch('/api/report/domain/' + domain.domain)])
                    .then(responses => {
                        const response1 = checkStatus(responses[0]);

                        return Promise.all([response1]);
                    })
                    .then(data => {
                        let response1 = data[0].json();

                        return Promise.all([response1]);
                    })
                    .then(data => {
                        let allReports = data[0];


                        container.innerHTML = `
                        <div class="d-flex justify-content-center align-items-end p-4 tiled-WS-background mb-3" style="position: relative;">
                            <h2 class="fw-bold fs-1">${domain.name}</h2>
                        </div>
                        <div class="container-fluid">
                            <div class="row">
                                <div class="col-12 mb-3">
                                    <div class="px-3 py-3 rounded-3 bg-dark h-100">
                                        <h5 class="fw-bold text-center">Domain Activity</h5>
                                        <canvas id="domain-activity-canvas"></canvas>
                                    </div>
                                </div>
                                <div class="col-lg-4 col-12 mb-3">
                                    <div class="px-3 py-3 rounded-3 bg-dark h-100">
                                        <h4 class="fw-bold text-center">Most Active User</h4>
                                        <p class="fs-4 text-center mb-0">Poopsie</p>
                                    </div>
                                </div>
                                <div class="col-lg-4 col-12 mb-3">
                                    <div class="px-3 py-3 rounded-3 bg-dark h-100">
                                        <h5 class="fw-bold text-center">Unique Users</h5>
                                        <p class="fs-4 text-center mb-0">${uniqueUsersPerDomainLookup(domain.domain)}</p>
                                    </div>
                                </div>
                                <div class="col-lg-4 col-12 mb-3">
                                    <div class="px-3 py-3 rounded-3 bg-dark h-100">
                                        <h5 class="fw-bold text-center">Most Active Country</h5>
                                        <p class="fs-4 text-center mb-0">poop</p>
                                    </div>
                                </div>
                                <div class="col-lg-4 col-12 mb-3">
                                    <div class="px-3 py-3 rounded-3 bg-dark h-100">
                                        <h4 class="fw-bold text-center">Blocked Requests</h4>

                                    </div>
                                </div>
                                <div class="col-lg-4 col-12 mb-3">
                                    <div class="px-3 py-3 rounded-3 bg-dark h-100">
                                        <h5 class="fw-bold text-center">Top Endpoints</h5>
                                        <p class="fs-4 text-center mb-0">w costi</p>
                                    </div>
                                </div>
                                <div class="col-lg-4 col-12 mb-3">
                                    <div class="px-3 py-3 rounded-3 bg-dark h-100">
                                        <h5 class="fw-bold text-center">Browser Distribution</h5>

                                    </div>
                                </div>

                                <div class="col-12 mb-2">
                                    <div class="py-3">
                                        <ul class="nav nav-underline" id="myTab" role="tablist">
                                          <li class="nav-item" role="presentation">
                                            <button class="nav-link active" id="request-by-date-tab" data-bs-toggle="tab" data-bs-target="#request-by-date-tab-pane" type="button" role="tab" aria-controls="request-by-date-tab-pane" aria-selected="true">All Requests</button>
                                          </li>
                                          <li class="nav-item" role="presentation">
                                            <button class="nav-link" id="endpoint-frequency-tab" data-bs-toggle="tab" data-bs-target="#endpoint-frequency-tab-pane" type="button" role="tab" aria-controls="endpoint-frequency-tab-pane" aria-selected="false">Endpoint Frequency</button>
                                          </li>
                                          <li class="nav-item" role="presentation">
                                            <button class="nav-link" id="domain-frequency-tab" data-bs-toggle="tab" data-bs-target="#domain-frequency-tab-pane" type="button" role="tab" aria-controls="domain-frequency-tab-pane" aria-selected="false">Total Domain Frequency</button>
                                          </li>
                                          <li class="nav-item" role="presentation">
                                              <button class="nav-link" id="daily-domain-frequency-tab" data-bs-toggle="tab" data-bs-target="#daily-domain-frequency-tab-pane" type="button" role="tab" aria-controls="daily-domain-frequency-tab-pane" aria-selected="false">Daily Domain Frequency</button>
                                          </li>
                                        </ul>
                                        <div class="tab-content" id="myTabContent">
                                          <div class="tab-pane fade show overflow-auto active" id="request-by-date-tab-pane" role="tabpanel" aria-labelledby="request-by-date-tab" tabindex="0"></div>
                                          <div class="tab-pane overflow-auto fade" id="endpoint-frequency-tab-pane" role="tabpanel" aria-labelledby="endpoint-frequency-tab" tabindex="0"></div>
                                          <div class="tab-pane overflow-auto fade" id="domain-frequency-tab-pane" role="tabpanel" aria-labelledby="domain-frequency-tab" tabindex="0"></div>
                                          <div class="tab-pane overflow-auto fade" id="daily-domain-frequency-tab-pane" role="tabpanel" aria-labelledby="daily-domain-frequency-tab" tabindex="0"></div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        `;


                    });
        }
    }

    function renderAllUsers(){
        let container = document.querySelector("#main-content");
        let htmlContent = `
            <div class="d-flex justify-content-center align-items-end p-4 tiled-WS-background mb-3" style="position: relative;">
                <h2 class="fw-bold fs-1">All Users</h2>
            </div>
            <div class="container-fluid">
                <p class="fs-4">Ordered ${userList.length} users by date discovered</p>
                <div class="row row-cols-1 row-cols-md-3 row cols-lg-4">
        `;
        userList.forEach((user) => {
            let htmlDomain = `
                <div class="col mb-4">
                    <div class="px-3 py-3 rounded-3 ${hasAlreadyPassed(user.expire)? "bg-dark" : "alert alert-danger"}" onclick="viewUser('${user.ip}')">
                        <h3>${user.ip}</h3>
                        <p class="mb-0">${user.nickname !== 'null' ? "No Name" : user.nickname} &#8226; ${createBadge(user.threat_level)}</p>
                        ${hasAlreadyPassed(user.expire)? "<p>Access Accepted</p>" : "<p>Access Denied</p>"}
                    </div>
                </div>
            `;
            htmlContent+= htmlDomain;
        });
        htmlContent += `</div></div>`;
        container.innerHTML = htmlContent;
    }

    function viewCreateDomain(message='', success=true){
        let container = document.querySelector("#main-content");

        let alert = "";
        if(!success){
            alert = `<div class='alert alert-danger alert-dismissible fade show mt-3'>${message}<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button></div>`;
        }else if(message !== ""){
            alert = `<div class='alert alert-success alert-dismissible fade show mt-3'>${message}<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button></div>`;
        }

        let htmlContent =`
        <div class="d-flex justify-content-center align-items-end p-4 tiled-WS-background mb-3" style="position: relative;">
            <h2 class="fw-bold fs-1">Add New Domain</h2>
        </div>
        <div class="container-fluid" style="margin-top: 100px; margin-bottom: 100px;">
            <div class="row">
                <div class="col-md-6 offset-md-3 p-4">
                    <h2 class="fw-bold text-center mb-2">Enter Domain Information</h2>
                    ${alert}
                    <label for="domain-name-form" class="form-label">Domain Nickname</label>
                    <input class="form-control form-control-lg mb-3" id="domain-name-form" type="text" placeholder="Costi Online">

                    <label for="domain-form" class="form-label">Domain</label>
                    <input class="form-control form-control-lg" id="domain-form" type="text" placeholder="costionline.com" aria-describedby="domain-form-helper">
                    <div id="domain-form-helper" class="form-text">Domain must be exact</div>
                    <button class="btn btn-primary mb-3 mt-3" onclick="newDomain()">Add Domain</button>
                </div>
            </div>
        </div>
        `;
        container.innerHTML = htmlContent;
    }

    function viewUser(ip, err=""){
        let container = document.querySelector("#main-content");
        if(ip===""){
            container.innerHTML = `
            <div class="d-flex justify-content-center align-items-end p-4 tiled-WS-background mb-3" style="position: relative;">
                <h2 class="fw-bold fs-1">User Details</h2>
            </div>
            <div class="container-fluid" style="margin-top: 100px; margin-bottom: 100px;">
                <div class="row">
                    <div class="col-md-6 offset-md-3 p-4">
                        <h2 class="fw-bold text-center mb-2">User lookup</h2>
                        ${err != ""? `<div class='alert alert-danger alert-dismissible fade show'>${err}<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button></div>` : ""}
                        <label for="user-lookup-form" class="form-label">IP address of user</label>
                        <input class="form-control form-control-lg" id="user-lookup-form" type="text" placeholder="192.168.0.1" aria-describedby="ipHelper">
                        <div id="ipHelper" class="form-text">ID must be exact</div>
                        <button class="btn btn-primary mb-3 mt-3" onclick="searchUserButton()">Search User</button>
                    </div>
                </div>
            </div>

            `;
        }else{
            // Check to see if user exists
            let user = userLookup(ip);

            if(user === undefined || user == null){
                // User not found
                viewUser('', "User not found");
            }

            // Query database for reports
            Promise.all([fetch('/api/report/user/' + ip), fetch('/api/analytics/endpoint-requests/' + ip), fetch('/api/analytics/domain-requests/' + ip), fetch('/api/analytics/daily-requests-by-domain/' + ip)])
                    .then(responses => {
                        const response1 = checkStatus(responses[0]);
                        const response2 = checkStatus(responses[1]);
                        const response3 = checkStatus(responses[2]);
                        const response4 = checkStatus(responses[3]);

                        return Promise.all([response1, response2, response3, response4]);
                    })
                    .then(data => {
                        let response1 = data[0].json();
                        let response2 = data[1].json();
                        let response3 = data[2].json();
                        let response4 = data[3].json();

                        return Promise.all([response1, response2, response3, response4]);
                    })
                    .then(data => {
                        let userReports = data[0];
                        let requestFrequency = data[1];
                        let domainFrequency = data[2];
                        let dailyDomainFrequency = data[3];
                        let lastSeen = userReports.length === 0? `N/A` : formatDate(userReports[0].timestamp);
                        let firstSeen = formatDate(user.first_seen);
                        let numBlocked = 0;
                        let topEndpoints = "";
                        for(let i = 0; i < requestFrequency.length && i < 9; i++){
                            topEndpoints += `<p class="mb-2"><strong>${requestFrequency[i][3]}</strong>: ${createMethodBadge(requestFrequency[i][2])} ${requestFrequency[i][1]}</p>`;
                        }

                        // Report table
                        let reportTable = `
                            <table class="table table-dark table-striped table-responsive">
                                <thead class="table-dark">
                                    <tr>
                                        <th scope="col">Domain</th>
                                        <th scope="col">Access</th>
                                        <th scope="col">Timestamp</th>
                                        <th scope="col">url</th>
                                        <th scope="col">Method</th>
                                        <th scope="col">Header</th>
                                        <th scope="col">Protocol</th>
                                        <th scope="col">Locale</th>
                                    </tr>
                                </thead>
                                <tbody>
                        `;
                        userReports.forEach((request) => {
                            reportTable += `
                            <tr>
                                <th scope="row">${request.domain_id}</th>
                                <td>${request.blocked? "<span class='badge text-bg-danger'>Denied</span>" : "<span class='badge text-bg-success'>Allow</span>"}</td>
                                <td>${formatDateTime(request.timestamp)}</td>
                                <td>${request.request_url}</td>
                                <td>${createMethodBadge(request.request_method)}</td>
                                <td>${request.request_header}</td>
                                <td>${request.request_protocol}</td>
                                <td>${request.client_locale}</td>
                            </tr>
                            `;
                            if(request.blocked){
                                numBlocked++;
                            }
                        });
                        reportTable += `</tbody></table>`;

                        // Endpoint frequency table
                        let endpointTable = `
                            <table class="table table-dark table-striped table-responsive">
                                <thead class="table-dark">
                                    <tr>
                                        <th scope="col">Domain</th>
                                        <th scope="col">Endpoint</th>
                                        <th scope="col">Method</th>
                                        <th scope="col">Frequency</th>
                                    </tr>
                                </thead>
                                <tbody>
                        `;
                        requestFrequency.forEach((request) => {
                            endpointTable += `
                            <tr>
                                <th scope="row">${request[0]}</th>
                                <td>${request[1]}</th>
                                <td>${createMethodBadge(request[2])}</td>
                                <td>${request[3]}</td>
                            </tr>
                            `;
                        });
                        endpointTable += `</tbody></table>`;


                        // Domain frequency table
                        let domainTable = `
                            <table class="table table-dark table-striped table-responsive">
                                <thead class="table-dark">
                                    <tr>
                                        <th scope="col">Domain</th>
                                        <th scope="col">Frequency</th>
                                    </tr>
                                </thead>
                                <tbody>
                        `;
                        domainFrequency.forEach((request) => {
                            domainTable += `
                            <tr>
                                <th scope="row">${request[0]}</th>
                                <td>${request[1]}</td>
                            </tr>
                            `;
                        });
                        domainTable += `</tbody></table>`;

                        // User activity table
                        let userActivityTable = `
                            <table class="table table-dark table-striped table-responsive">
                                <thead class="table-dark">
                                    <tr>
                                        <th scope="col">Domain</th>
                                        <th scope="col">Timestamp</th>
                                        <th scope="col">Requests</th>
                                    </tr>
                                </thead>
                                <tbody>
                        `;
                        dailyDomainFrequency.forEach((request) => {
                            userActivityTable += `
                            <tr>
                                <th scope="row">${request[0]}</th>
                                <td>${formatDateTime(request[1])}</th>
                                <td>${request[2]}</td>
                            </tr>
                            `;
                        });
                        userActivityTable += `</tbody></table>`;


                        container.innerHTML = `
                        <div class="d-flex justify-content-center align-items-end p-4 tiled-WS-background mb-3" style="position: relative;">
                            <h2 class="fw-bold fs-1">User Details</h2>
                        </div>
                        <div class="container-fluid">
                            <div class="row">
                                <div class="col-12 mb-2 d-flex align-items-center justify-content-between">
                                    <div><a class="text-secondary fs-4" onclick="renderAllUsers()">&lt; All Users</a></div>
                                    <div><a class="text-secondary fs-4" onclick="viewUser('${user.ip}')">Refresh</a></div>
                                    <div>
                                        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#editUserModal">
                                          Edit User
                                        </button>
                                    </div>
                                </div>

                                <div class="col-lg-4 col-12 mb-3">
                                    <div class="px-3 py-3 rounded-3 bg-dark h-100">
                                        <h1 class="text-center fw-bold">${user.ip}</h1>
                                        <h5 class="text-center fw-bold mb-5">${user.nickname !== 'null' ? "No name" : user.nickname}</h5>
                                        <p class="text-center fs-4">${createBadge(user.threat_level)}</p>
                                        <p class="fw-bold text-center fs-4">Total Requests: ${userReports.length}</p>
                                    </div>
                                </div>
                                <div class="col-lg-8 col-12 mb-3">
                                    <div class="px-3 py-3 rounded-3 bg-dark h-100">
                                        <h4 class="fw-bold text-center">User Requests</h4>
                                        <canvas id="activity-chart"></canvas>
                                    </div>
                                </div>
                                <div class="col-lg-4 col-12 mb-3">
                                    <div class="px-3 py-3 rounded-3 bg-dark dual-info-box h-100">
                                        <div>
                                            <h5 class="fw-bold text-center">First Seen</h5>
                                            <p class="fs-4 text-center mb-0">${firstSeen}</p>
                                        </div>
                                        <div>
                                            <h5 class="fw-bold text-center">Last Seen</h5>
                                            <p class="fs-4 text-center mb-0">${lastSeen}</p>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-4 col-12 mb-3">
                                    <div class="px-3 py-3 rounded-3 bg-dark h-100">
                                        <h5 class="fw-bold text-center">Top Endpoints</h5>
                                        ${topEndpoints}
                                    </div>
                                </div>
                                <div class="col-lg-4 col-12 mb-3">
                                    <div class="px-3 py-3 rounded-3 bg-dark h-100">
                                        <h5 class="fw-bold text-center">Domain Activity</h5>
                                        <canvas id="domain-chart"></canvas>
                                    </div>
                                </div>
                                <div class="col-12 mb-3">
                                    <div class="px-3 py-3 rounded-3 d-flex align-items-center justify-content-between ${hasAlreadyPassed(user.expire)? "bg-dark" : "alert alert-danger"}">
                                        <div>
                                            <h2 class="fw-bold">Conditional Access</h2>
                                        </div>
                                        <div>${hasAlreadyPassed(user.expire)? "<h2>Traffic Allowed</h2>" : "<h5 class='text-center fw-bold'>Blocked Requests</h5><p class='fs-3 mb-0 text-center'>" + numBlocked + "</p>"}</div>
                                        ${hasAlreadyPassed(user.expire)? "" : "<div>" + user.reason + "</div>"}
                                    </div>
                                </div>
                                <div class="col-12 mb-2">
                                    <div class="py-3">
                                        <ul class="nav nav-underline" id="myTab" role="tablist">
                                          <li class="nav-item" role="presentation">
                                            <button class="nav-link active" id="request-by-date-tab" data-bs-toggle="tab" data-bs-target="#request-by-date-tab-pane" type="button" role="tab" aria-controls="request-by-date-tab-pane" aria-selected="true">All Requests</button>
                                          </li>
                                          <li class="nav-item" role="presentation">
                                            <button class="nav-link" id="endpoint-frequency-tab" data-bs-toggle="tab" data-bs-target="#endpoint-frequency-tab-pane" type="button" role="tab" aria-controls="endpoint-frequency-tab-pane" aria-selected="false">Endpoint Frequency</button>
                                          </li>
                                          <li class="nav-item" role="presentation">
                                            <button class="nav-link" id="domain-frequency-tab" data-bs-toggle="tab" data-bs-target="#domain-frequency-tab-pane" type="button" role="tab" aria-controls="domain-frequency-tab-pane" aria-selected="false">Total Domain Frequency</button>
                                          </li>
                                          <li class="nav-item" role="presentation">
                                              <button class="nav-link" id="daily-domain-frequency-tab" data-bs-toggle="tab" data-bs-target="#daily-domain-frequency-tab-pane" type="button" role="tab" aria-controls="daily-domain-frequency-tab-pane" aria-selected="false">Daily Domain Frequency</button>
                                          </li>
                                        </ul>
                                        <div class="tab-content" id="myTabContent">
                                          <div class="tab-pane fade show overflow-auto active" id="request-by-date-tab-pane" role="tabpanel" aria-labelledby="request-by-date-tab" tabindex="0">${reportTable}</div>
                                          <div class="tab-pane overflow-auto fade" id="endpoint-frequency-tab-pane" role="tabpanel" aria-labelledby="endpoint-frequency-tab" tabindex="0">${endpointTable}</div>
                                          <div class="tab-pane overflow-auto fade" id="domain-frequency-tab-pane" role="tabpanel" aria-labelledby="domain-frequency-tab" tabindex="0">${domainTable}</div>
                                          <div class="tab-pane overflow-auto fade" id="daily-domain-frequency-tab-pane" role="tabpanel" aria-labelledby="daily-domain-frequency-tab" tabindex="0">${userActivityTable}</div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="modal fade" id="editUserModal" tabindex="-1" aria-hidden="true">
                            <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title">Edit User Details</h5>
                                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                    </div>
                                        <div class="modal-body">
                                            <div class="row">
                                                <div class="col-12 mb-3">
                                                    <label for="nicknameInput" class="form-label">Nickname</label>
                                                    <input type="text" class="form-control" id="nicknameInput">
                                                </div>
                                                <div class="col-12 mb-3">
                                                    <label for="threatLevel" class="form-label">User Access</label>
                                                        <select class="form-select" id="threatLevel">
                                                            <option value="none" selected>Keep the same</option>
                                                            <option value="delete">Remove Ban</option>
                                                            <option value="week-1">Ban 1 week</option>
                                                            <option value="month-1">Ban 1 month</option>
                                                            <option value="month-6">Ban 6 months</option>
                                                            <option value="year-1">Ban 1 year</option>
                                                            <option value="year-2">Ban 2 years</option>
                                                            <option value="year-100">Ban 100 years</option>
                                                        </select>
                                                </div>
                                                <div class="col-12 mb-3">
                                                    <label for="threatLevel" class="form-label">Threat Level</label>
                                                    <select class="form-select" id="threatLevel">
                                                        <option selected>Choose threat level</option>
                                                        <option value="3">Not Assessed</option>
                                                        <option value="2">Normal</option>
                                                        <option value="1">Suspicious</option>
                                                        <option value="0">Threat</option>
                                                    </select>
                                                </div>
                                                <div class="col-12 mb-3">
                                                    <label for="banReason" class="form-label">Ban Reason</label>
                                                    <textarea class="form-control" id="banReason" rows="3"></textarea>
                                                </div>
                                            </div>
                                        </div>
                                    <div class="modal-footer">
                                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                                        <button type="button" class="btn btn-primary">Save changes</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    `;
                        // Chart data
                        let domainList = [];
                        let domainRequestCount = [];

                        domainFrequency.forEach((domain) => {
                            domainList.push(domain[0]);
                            domainRequestCount.push(domain[1]);
                        });

                        let dailyDomainFrequencyDatasets = domainList.map(domain => {
                            let usageData = dailyDomainFrequency.map(day => ({
                                x: new Date(day[1]),
                                y: day[0] === domain? day[2] : 0
                            }));

                            console.log(usageData);

                            return {
                                label: domain,
                                data: usageData
                            }
                        });


                        let activityCanvas = document.querySelector("#activity-chart");
                        let domainCanvas = document.querySelector("#domain-chart");



                        let activityChart = new Chart(activityCanvas, {
                            type:'line',
                            data:{
                                datasets: dailyDomainFrequencyDatasets
                            },
                            options: {
                                plugins:{
                                    title:{
                                        text: "Terence"
                                    }
                                },
                                scales: {
                                    x: {
                                        type: 'time',
                                        time:{
                                            unit: 'day',
                                        }
                                    }
                                }
                            }
                        });

                        let domainChart = new Chart(domainCanvas, {
                            type:'doughnut',
                            data:{
                                labels:domainList,
                                datasets:[{
                                    label:'Requests',
                                    data:domainRequestCount
                                }]
                            },
                            options:{}
                        });
                    })
                    .catch((response)=>{
                        console.log(response);
                        response.json()
                                .then(errorData => {
                                    console.log(errorData);
                                })
                                .catch(error => {
                                    console.error("Error parsing error response:", error);
                                });
                    });
        }
    }

    function searchUserButton(){
        let ip = document.querySelector("#user-lookup-form").value;
        viewUser(ip);
    }
</script>

<script>
    // Functions that write to database

    function newDomain(){
        let domainData = {
            "name":document.querySelector("#domain-name-form").value,
            "url": document.querySelector("#domain-form").value
        };

        let headers = new Headers();
        headers.append('Content-Type', 'application/json');

        let options = {
            method: 'POST',
            headers: headers,
            body: JSON.stringify(domainData)
        };

        fetch("/api/domain/new", options)
                .then(checkStatus)
                .then(response => response.json())
                .then(usableResponse => {
                    refresh();
                    console.log(usableResponse);
                    viewCreateDomain(usableResponse.message, usableResponse.success);
                });
    }
</script>

<script>
    const createBadge = (status) => {
        let badgeClass = '';
        switch (status) {
            case 'Threat':
                badgeClass = 'badge text-bg-danger';
                break;
            case 'Suspicious':
                badgeClass = 'badge text-bg-warning';
                break;
            case 'Normal':
                badgeClass = 'badge text-bg-success';
                break;
            case 'NotAssessed':
                badgeClass = 'badge text-bg-secondary';
                break;
            default:
                badgeClass = 'badge text-bg-secondary';
                break;
        }
        return `<span class="${badgeClass}">${status}</span>`;
    };
    const createMethodBadge = (status) => {
            let badgeClass = '';
            switch (status) {
                case 'GET':
                    badgeClass = 'badge text-bg-info';
                    break;
                case 'POST':
                    badgeClass = 'badge text-bg-warning';
                    break;
                default:
                    badgeClass = 'badge text-bg-secondary';
                    break;
            }
            return `<span class="${badgeClass}">${status}</span>`;
        };
    function userLookup(ip){
        return userList.find(user => user.ip === ip);
    }
    function domainLookup(domain_id){
        return domainList.find(domain => domain.domain === domain_id);
    }
    function uniqueUsersPerDomainLookup(domain_id){
        return uniqueUsersPerDomain.find(stat => stat[0] === domain_id)[1];
    }
    function formatDate(dateString) {
        const date = new Date(dateString);
        const mm = String(date.getMonth() + 1).padStart(2, '0');
        const dd = String(date.getDate()).padStart(2, '0');
        const yyyy = date.getFullYear();
        return `${mm}/${dd}/${yyyy}`;
    }
    function formatDateTime(dateTimeString) {
        const dateTime = new Date(dateTimeString);
        const mm = String(dateTime.getMonth() + 1).padStart(2, '0');
        const dd = String(dateTime.getDate()).padStart(2, '0');
        const yyyy = dateTime.getFullYear();
        const hours = String(dateTime.getHours()).padStart(2, '0');
        const minutes = String(dateTime.getMinutes()).padStart(2, '0');
        const seconds = String(dateTime.getSeconds()).padStart(2, '0');
        return `${mm}/${dd}/${yyyy} ${hours}:${minutes}:${seconds}`;
    }
    function hasAlreadyPassed(dateTimeString) {
        // Convert the input date and time string to a Date object
        const inputDate = new Date(dateTimeString);

        // Get the current date and time
        const currentDate = new Date();

        // Compare the input date with the current date
        return inputDate < currentDate;
    }
</script>
</body>
</html>
